@page "/todo/edit/{Id:guid}"
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title mb-4">Edit Task</h3>
                    @if (todo != null)
                    {
                        <EditForm Model="@todo" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <input type="hidden" @bind-value="todo.Id" />

                            <div class="mb-3">
                                <label class="form-label">Title</label>
                                <InputText @bind-Value="todo.Title" class="form-control" />
                                <ValidationMessage For="@(() => todo.Title)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputTextArea @bind-Value="todo.Description" class="form-control" rows="3" />
                                <ValidationMessage For="@(() => todo.Description)" class="text-danger" />
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Deadline</label>
                                    <InputDate @bind-Value="todo.Deadline" class="form-control" />
                                    <ValidationMessage For="@(() => todo.Deadline)" class="text-danger" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Priority</label>
                                    <InputSelect @bind-Value="todo.Priority" class="form-select">
                                        @foreach (var priority in Enum.GetValues(typeof(Priority)))
                                        {
                                            <option value="@priority">@priority</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => todo.Priority)" class="text-danger" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Category</label>
                                <InputSelect @bind-Value="todo.CategoryId" class="form-select">
                                    <option value="">-- Select Category --</option>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => todo.CategoryId)" class="text-danger" />
                            </div>

                            <div class="mb-3 form-check">
                                <InputCheckbox @bind-Value="todo.IsCompleted" class="form-check-input" />
                                <label class="form-check-label">Completed</label>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" @onclick="GoBack" class="btn btn-outline-secondary">Back</button>
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UpdateTodoDto todo;
    private IEnumerable<CategoryDto> categories;

    protected override async Task OnInitializedAsync()
    {
        var todoDto = await ApiClient.GetTodoByIdAsync(Id);
        todo = new UpdateTodoDto
            {
                Id = todoDto.Id,
                Title = todoDto.Title,
                Description = todoDto.Description,
                Deadline = todoDto.Deadline,
                Priority = todoDto.Priority,
                IsCompleted = todoDto.IsCompleted,
                CategoryId = todoDto.CategoryId
            };
        categories = await ApiClient.GetCategoriesAsync();
    }

    private async Task HandleSubmit()
    {
        await ApiClient.UpdateTodoAsync(Id, todo);
        NavigationManager.NavigateTo("/");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }
}